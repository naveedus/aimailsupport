import { ConfigType } from '../helpers/configType'
import { getConfigs, localizeNodes } from '../helpers/utils'
import { ProviderFactory } from '../llmProviders/providerFactory'

// Internationalization message management
localizeNodes()

// Handle AI LLM provider selection event, properly managing what to display
// in the DOM.
document.querySelector('#llmProvider').addEventListener('change', (event) => {
    const selectedLlmProvider = (event.target as HTMLInputElement).value

    updateDOMBasedOnSelectLlmProvider(selectedLlmProvider)
})

// Adds an event to update the real-time selection of temperature for the
// output generated by the selected LLM model.
document.querySelector('#llmTemperature').addEventListener('input', (event) => {
    const destination = document.querySelector<HTMLInputElement>('label[for=llmTemperature] span')
    const currentTemperatureValue = (event.currentTarget as HTMLInputElement).value
    destination.innerText = parseFloat(currentTemperatureValue).toFixed(2)
})

// Capture all changes in the form fields, disabling the test button.
// This ensures consistency between the edited inputs and the test that
// can be performed by the user, which will always require a prior save.
document.querySelectorAll('#optionsForm input').forEach((node) => {
    node.addEventListener('input', () => {
        document.querySelector<HTMLButtonElement>('#optionsForm button.test').disabled = true
    })
})

document.querySelectorAll('#optionsForm select').forEach((node) => {
    node.addEventListener('change', () => {
        document.querySelector<HTMLButtonElement>('#optionsForm button.test').disabled = true
    })
})
// <-- capture all changes in the form fields, disabling the test button

// Test management -->
document.querySelector('#optionsForm button.test').addEventListener('click', async (event) => {
    // Disable the test button while waiting for the result
    (event.target as HTMLButtonElement).disabled = true;
    (event.target as HTMLButtonElement).classList.add('testing')

    const configs = await getConfigs()
    const llmProvider = ProviderFactory.getInstance(configs)

    llmProvider.testIntegration().then(() => {
        document.querySelector('#optionsForm #testResult').classList.add('ok')
        document.querySelector('#optionsForm #testResult .message').innerHTML = messenger.i18n.getMessage('options.testSuccessful')
    }).catch(error => {
        document.querySelector('#optionsForm #testResult').classList.add('ko')
        document.querySelector('#optionsForm #testResult .message').innerHTML = error.message
    }).finally(() => {
        document.querySelector<HTMLButtonElement>('#optionsForm button.test').classList.remove('testing')
    })
})

document.querySelector('#testResult .close-icon').addEventListener('click', async _ => {
    document.querySelector('#optionsForm #testResult').classList.remove('ok', 'ko')

    // Re-enable the test button as the user has closed the pop-up with the response
    document.querySelector<HTMLButtonElement>('#optionsForm button.test').disabled = false
})
// <-- test management

// Save management
document.querySelector('#optionsForm').addEventListener('submit', async (event) => {
    event.preventDefault()

    if (!(event.currentTarget as HTMLFormElement).checkValidity()) {
        (event.currentTarget as HTMLFormElement).classList.add('submit-attempt')

        return
    }

    // Store options -->
    const configs: ConfigType = {
        mainUserLanguageCode: document.querySelector<HTMLInputElement>('#mainUserLanguageCode').value,
        translationLanguageCodes: document.querySelector<MultipleLanguageSelector>('#translationLanguageCodes').getValues(),
        llmProvider: document.querySelector<HTMLInputElement>('#llmProvider').value,
        temperature: parseFloat(document.querySelector<HTMLInputElement>('#llmTemperature').value),
        servicesTimeout: parseInt(document.querySelector<HTMLInputElement>('#servicesTimeout').value),
        debugMode: document.querySelector<HTMLInputElement>('#debugMode').checked,
        anthropic: {
            apiKey: document.querySelector<HTMLInputElement>('#anthropicApiKey').value,
            model: document.querySelector<HTMLInputElement>('#anthropicModel').value
        },
        deepseek: {
            apiKey: document.querySelector<HTMLInputElement>('#deepseekApiKey').value
        },
        google: {
            apiKey: document.querySelector<HTMLInputElement>('#googleApiKey').value,
            model: document.querySelector<HTMLInputElement>('#googleModel').value
        },
        groq: {
            apiKey: document.querySelector<HTMLInputElement>('#groqApiKey').value,
            model: document.querySelector<HTMLInputElement>('#groqModel').value
        },
        lms: {
            serviceUrl: document.querySelector<HTMLInputElement>('#lmsServiceUrl').value,
            model: document.querySelector<HTMLInputElement>('#lmsModel').value
        },
        mistral: {
            apiKey: document.querySelector<HTMLInputElement>('#mistralApiKey').value
        },
        ollama: {
            serviceUrl: document.querySelector<HTMLInputElement>('#ollamaServiceUrl').value,
            model: document.querySelector<HTMLInputElement>('#ollamaModel').value
        },
        openai: {
            apiKey: document.querySelector<HTMLInputElement>('#openaiApiKey').value,
            organizationId: document.querySelector<HTMLInputElement>('#openaiOrganizationId').value,
            model: document.querySelector<HTMLInputElement>('#openaiModel').value,
            text2speech: {
                audioQuality: document.querySelector<HTMLInputElement>('#openaiText2SpeechAudioQuality').value,
                voice: document.querySelector<HTMLInputElement>('#openaiText2SpeechVoice').value,
                speed: parseFloat(document.querySelector<HTMLInputElement>('#openaiText2SpeechSpeed').value)
            }
        },
        xai: {
            apiKey: document.querySelector<HTMLInputElement>('#xaiApiKey').value,
            model: document.querySelector<HTMLInputElement>('#xaiModel').value
        }
    }
    // <-- store options

    // Persists the configurations
    browser.storage.sync.set(configs)
    //logMessage('Storing configurations:\n' + JSON.stringify(await getConfigs(), null, 4))

    // Displaying and turning off the save OK message -->
    document.querySelector('#saveOK').classList.add('show')

    setTimeout(() => {
        document.querySelector('#saveOK').classList.remove('show')
    }, 3000)
    // <-- displaying and turning off the save OK message

    // The test button becomes available only after a correct configuration has
    // been saved.
    document.querySelector('#optionsForm button.test').removeAttribute('disabled')

    // Sends a message named 'optionsChanged' to signal that configurations
    // have been changed, allowing various parts of the application to listen
    // for this message and handle any necessary adjustments.
    browser.runtime.sendMessage({ type: 'optionsChanged' })
})

// Restore options
document.addEventListener('DOMContentLoaded', async _ => {
    const configs = await getConfigs()

    const selectedLlmProvider = configs.llmProvider

    // Temperature -->
    document.querySelector<HTMLInputElement>('#llmTemperature').value = (configs.temperature || 1).toString()
    document.querySelector<HTMLInputElement>('label[for=llmTemperature] span').innerText = parseFloat(document.querySelector<HTMLInputElement>('#llmTemperature').value).toFixed(2)
    // <-- temperature

    // The language code is retrieved without the regional details (e.g.,
    // 'en-US' becomes just 'en').
    const languageWithRegion = browser.i18n.getUILanguage()
    const languageCode = languageWithRegion.split('-')[0]

    document.querySelector<HTMLInputElement>('#mainUserLanguageCode').value = configs.mainUserLanguageCode || languageCode
    document.querySelector<MultipleLanguageSelector>('#translationLanguageCodes').setValues(configs.translationLanguageCodes || [])
    document.querySelector<HTMLInputElement>('#llmProvider').value = selectedLlmProvider
    document.querySelector<HTMLInputElement>('#servicesTimeout').value = (configs.servicesTimeout || 12).toString()
    document.querySelector<HTMLInputElement>('#debugMode').checked = configs.debugMode

    // Anthropic Claude section -->
    document.querySelector<HTMLInputElement>('#anthropicApiKey').value = configs.anthropic?.apiKey || ''
    document.querySelector<HTMLInputElement>('#anthropicModel').value = configs.anthropic?.model || 'claude-3-haiku-20240307'
    // <-- Anthropic Claude section

    // DeepSeek section -->
    document.querySelector<HTMLInputElement>('#deepseekApiKey').value = configs.deepseek?.apiKey || ''
    // <-- DeepSeek section

    // Google Gemini section -->
    document.querySelector<HTMLInputElement>('#googleApiKey').value = configs.google?.apiKey || ''
    document.querySelector<HTMLInputElement>('#googleModel').value = configs.google?.model || 'gemini-1.5-flash'
    // <-- Google Gemini section

    // Groq section -->
    document.querySelector<HTMLInputElement>('#groqApiKey').value = configs.groq?.apiKey || ''
    document.querySelector<HTMLInputElement>('#groqModel').value = configs.groq?.model || ''
    // <-- Groq section

    // LM Studio section -->
    document.querySelector<HTMLInputElement>('#lmsServiceUrl').value = configs.lms?.serviceUrl || 'http://localhost:1234'
    document.querySelector<HTMLInputElement>('#lmsModel').value = configs.lms?.model || ''
    // <-- LM Studio section

    // Mistral AI section -->
    document.querySelector<HTMLInputElement>('#mistralApiKey').value = configs.mistral?.apiKey || ''
    // <-- Mistral AI section

    // Ollama section -->
    document.querySelector<HTMLInputElement>('#ollamaServiceUrl').value = configs.ollama?.serviceUrl || 'http://localhost:11434'
    document.querySelector<HTMLInputElement>('#ollamaModel').value = configs.ollama?.model || ''
    // <-- Ollama section

    // OpenAI GPT section -->
    document.querySelector<HTMLInputElement>('#openaiApiKey').value = configs.openai?.apiKey || ''
    document.querySelector<HTMLInputElement>('#openaiOrganizationId').value = configs.openai?.organizationId || ''
    document.querySelector<HTMLInputElement>('#openaiModel').value = configs.openai?.model || 'gpt-4o-mini'
    document.querySelector<HTMLInputElement>('#openaiText2SpeechAudioQuality').value = configs.openai?.text2speech?.audioQuality || 'tts-1'
    document.querySelector<HTMLInputElement>('#openaiText2SpeechVoice').value = configs.openai?.text2speech?.voice || 'onyx'
    document.querySelector<HTMLAudioElement>('#openaiText2SpeechVoicePreview audio').setAttribute('src', `https://cdn.openai.com/API/docs/audio/${document.querySelector<HTMLInputElement>('#openaiText2SpeechVoice').value}.wav`)
    document.querySelector<HTMLInputElement>('#openaiText2SpeechSpeed').value = (configs.openai?.text2speech?.speed || 1).toString()
    document.querySelector<HTMLInputElement>('label[for=openaiText2SpeechSpeed] span').innerText = parseFloat(document.querySelector<HTMLInputElement>('#openaiText2SpeechSpeed').value).toFixed(2)
    // <-- OpenAI GPT section

    // xAI Grok section -->
    document.querySelector<HTMLInputElement>('#xaiApiKey').value = configs.xai?.apiKey || ''
    document.querySelector<HTMLInputElement>('#xaiModel').value = configs.xai?.model || 'grok-2-latest'
    // <-- xAI Grok section

    updateDOMBasedOnSelectLlmProvider(selectedLlmProvider)

    // Check whether at least one of the email accounts in use is based on the "Owl
    // for Exchange" add-on, which has a bug with the messageDisplayScripts API
    // (https://webextension-api.thunderbird.net/en/115/messageDisplayScripts.html)
    // that affects the functionality of this add-on.
    const accountList = await messenger.accounts.list(false)
    if(accountList.some(account => account.type.endsWith('owl'))) {
        document.querySelector('#owlForExchangeBug').classList.add('show')
    }

    // If an LLM provider has been previously saved, the configuration is valid and
    // can potentially be tested, which is why its corresponding button becomes
    // selectable.
    if (selectedLlmProvider) {
        document.querySelector('#optionsForm button.test').removeAttribute('disabled')
    }
})

/**
 * Update the DOM based on the selected LLM provider.
 *
 * @param {string} selectedValue - The selected value
 *
 * @returns {void}
 */
function updateDOMBasedOnSelectLlmProvider(selectedValue: string): void {
    if (!selectedValue) {
        return
    }

    // The possible required attribute of the fields visible to the user is
    // removed.
    document.querySelectorAll('fieldset [required]').forEach((node) => {
        node.removeAttribute('required')
    })

    // Add the required attribute to the fields marked with data-required,
    // ensuring that the user appropriately fills out everything, in
    // accordance with the selected AI LLM service provider.
    document.querySelectorAll(`fieldset#${selectedValue} [data-required]`).forEach((node) => {
        node.setAttribute('required', 'required')
    })

    // The addition of the technical class "data-provider" enhanced by the
    // select, ensures the visibility of the correct section (from CSS rules)
    // for configuring the specific AI LLM service provider.
    document.querySelector('body').setAttribute('data-provider', selectedValue)
}